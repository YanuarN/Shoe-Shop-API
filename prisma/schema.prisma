// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

enum Status {
  pending
  completed
  cancelled
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  username  String   @unique
  name      String
  address   String
  number    String
  role      Role     @default(user)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order Order[]

  @@map("users")
  @@index([id])
  @@index([username])
  @@index([createdAt])

}

model Category {
  id      String     @id @default(uuid())
  name    String     @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
  @@index([id])
  @@map("categories")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  stock       Int
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  size        Size[] 
  image       ProductImage[]
  orderItem   OrderItem[]
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("products")
  @@index([id])
  @@index([categoryId])
  @@index([createdAt])
  @@index([name])
}

model Size {
  id        Int     @id @default(autoincrement())
  size      String

  products  Product[]
  @@map("sizes")
  @@index([id])
  @@index([size])
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  imageUrl  String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Order {
  id          String   @id @default(uuid())
  userId      String
  orderItem   OrderItem[]
  total       Float
  status      Status   @default(pending)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)


  @@map("orders")
  @@index([id])
  @@index([userId])
}

model OrderItem {
  id           String   @id @default(uuid())
  orderId      String
  productId    String
  quantity     Int
  priceAtOrder Float

  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product      Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}